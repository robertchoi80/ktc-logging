[loggers]
keys=root,ceilometer,cinder,glance,horizon,keystone,nova,quantum,swift,amqplib,sqlalchemy,boto,suds,eventletwsgi,<%= node["openstack"]["logging"]["ignore"].map{|k,v| k.gsub(/\W/, '_')}.join(',') %>

[formatters]
keys=normal,normal_with_name,debug,syslog_with_name,syslog_debug

[handlers]
keys=stderr,devel,prod,debug,cinder,glance,keystone,nova,quantum

## FORMATTERS ##

[formatter_debug]
format=[%(name)s]: %(asctime)s %(levelname)s %(module)s.%(funcName)s %(message)s

[formatter_normal]
format=%(asctime)s %(levelname)s %(message)s

[formatter_normal_with_name]
format=%(asctime)s %(name)s: %(levelname)s %(message)s

[formatter_syslog_with_name]
format=%(name)s: %(levelname)s %(message)s

[formatter_syslog_debug]
format=%(name)s: %(levelname)s %(module)s.%(funcName)s %(message)s

## LOGGERS ##

[logger_amqplib]
level = WARNING
handlers = stderr
qualname = amqplib

[logger_sqlalchemy]
level = WARNING
handlers = stderr
qualname = sqlalchemy
# "level = INFO" logs SQL queries.
# "level = DEBUG" logs SQL queries and results.
# "level = WARNING" logs neither.  (Recommended for production systems.)

[logger_boto]
level = WARNING
handlers = stderr
qualname = boto

[logger_suds]
level = INFO
handlers = stderr
qualname = suds

<% node["openstack"]["logging"]["ignore"].each do |k,v| %>
[logger_<%= k.gsub(/\W/, '_') %>]
level = <%= v %>
handlers = prod,debug
qualname = <%= k %>
<% end %>

[logger_eventletwsgi]
level = WARNING
handlers = stderr
qualname = eventlet.wsgi.server

[logger_root]
level=NOTSET
handlers=devel

[logger_ceilometer]
<% if node[:rsyslog][:separate_logs] %>
handlers=prod,debug
<% else %>
handlers=prod,debug
<% end %>
qualname=ceilometer

[logger_cinder]
<% if node[:rsyslog][:separate_logs] %>
handlers=prod,debug,cinder
<% else %>
handlers=prod,debug
<% end %>
qualname=cinder

[logger_glance]
<% if node[:rsyslog][:separate_logs] %>
handlers=prod,debug,glance
<% else %>
handlers=prod,debug
<% end %>
qualname=glance

[logger_horizon]
<% if node[:rsyslog][:separate_logs] %>
handlers=prod,debug
<% else %>
handlers=prod,debug
<% end %>
qualname=horizon

[logger_keystone]
<% if node[:rsyslog][:separate_logs] %>
handlers=prod,debug,keystone
<% else %>
handlers=prod,debug
<% end %>
qualname=keystone

[logger_nova]
<% if node[:rsyslog][:separate_logs] %>
handlers=prod,debug,nova
<% else %>
handlers=prod,debug
<% end %>
qualname=nova

[logger_quantum]
<% if node[:rsyslog][:separate_logs] %>
handlers=prod,debug,quantum
<% else %>
handlers=prod,debug
<% end %>
qualname=quantum

[logger_swift]
<% if node[:rsyslog][:separate_logs] %>
handlers=prod,debug
<% else %>
handlers=prod,debug
<% end %>
qualname=swift

## HANDLERS ##

[handler_stderr]
class = StreamHandler
args = (sys.stderr,)
formatter = debug

[handler_devel]
class=StreamHandler
level=NOTSET
formatter=debug
args=(sys.stdout,)

[handler_cinder]
level=DEBUG
class=handlers.SysLogHandler
formatter=syslog_with_name
args=(('/dev/log'), handlers.SysLogHandler.<%= node[:rsyslog][:cinder_facility] %>)

[handler_glance]
level=DEBUG
class=handlers.SysLogHandler
formatter=syslog_with_name
args=(('/dev/log'), handlers.SysLogHandler.<%= node[:rsyslog][:glance_facility] %>)

[handler_keystone]
level=INFO
class=handlers.SysLogHandler
formatter=syslog_with_name
args=(('/dev/log'), handlers.SysLogHandler.<%= node[:rsyslog][:keystone_facility] %>)

[handler_nova]
level=DEBUG
class=handlers.SysLogHandler
formatter=syslog_with_name
args=(('/dev/log'), handlers.SysLogHandler.<%= node[:rsyslog][:nova_facility] %>)

[handler_quantum]
level=DEBUG
class=handlers.SysLogHandler
formatter=syslog_with_name
args=(('/dev/log'), handlers.SysLogHandler.<%= node[:rsyslog][:quantum_facility] %>)

[handler_prod]
level=INFO
class=handlers.SysLogHandler
formatter=syslog_with_name
args=(('/dev/log'), handlers.SysLogHandler.LOG_LOCAL0)

[handler_debug]
level=DEBUG
class=handlers.SysLogHandler
formatter=syslog_debug
args=(('/dev/log'), handlers.SysLogHandler.LOG_LOCAL1)
