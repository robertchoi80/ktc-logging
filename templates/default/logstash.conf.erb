input {
  <% if node['logstash']['server']['inputs'].empty? -%>
  tcp {
    type => "tcp-input"
    port => "5959"
    format => "json_event"
  }
  <% else -%>
    <%= LogstashConf.section_to_str(node['logstash']['server']['inputs']) %>
  <% end -%>
}

filter {
  grok {
    type => "syslog"
    match => { "message" => "\<\d+\>%{SYSLOGTIMESTAMP:timestamp}%{SPACE}%{SYSLOGHOST:logsource}?%{SPACE}%{DATA:program}(?:\[%{POSINT:pid}\])?:? %{GREEDYDATA:message}" }
    overwrite => [ "message" ]
    add_tag => [ "abnormal" ]
  }

  grok {
    type => "syslog"
    match => { "message" => "%{LOGLEVEL:log_level}? %{GREEDYDATA:message}" }
    overwrite => [ "message" ]
    add_tag => [ "level_grokked" ]
  }

  <% if node['logstash']['server']['filter_list'].include?("json_tag") -%>
  grep {
    match => ["message", "_safe_log"]
    drop => false
    add_tag => ["safe_log"]
  }

  grep {
    match => ["message", "event_type"]
    drop => false
    add_tag => ["event"]
  }

  <% if node['logstash']['server']['filter_list'].include?("json_parse") -%>
  if ("safe_log" in [tags]) or ("event" in [tags]) {
    grok {
      patterns_dir => [ "<%= @patterns_dir %>" ]
      match => [ "message", "%{JSON}" ]
      add_tag => [ "json_pulled" ]
    }
  }

  if "json_pulled" in [tags] {
    mutate {
      gsub => [
        "json_content", "u'", "'",
        "json_content", ' None', ' "None"',
        "json_content", 'True', '"True"',
        "json_content", 'False', '"False"',
        "json_content", '"\[', '\[',
        "json_content", '\]"', '\]',
        "json_content", '"\{', '\{',
        "json_content", '\}"', '\}'
      ]
    }
    mutate {
      gsub => [
        "json_content", "'", '"'
      ]
    }
    json {
      type => 'syslog'
      source => "json_content"
      target => "json_data"
      add_tag => [ "json_parsed" ]
    }
    mutate {
      remove_field => [ "json_content" ]
    }
  }
  <% end -%>
  <% end -%>
}

output {
  <% if node['logstash']['server']['debug'] -%>
  stdout { debug => true debug_format => "json" }
  <% end -%>
  <% if @enable_embedded_es -%>
  elasticsearch { embedded => true }
  <% elsif not @es_cluster.empty? -%>
    <% if not @es_server_ip.empty? -%>
  elasticsearch { host => "<%= @es_server_ip %>" cluster => "<%= @es_cluster %>" }
    <% else -%>
  elasticsearch { cluster => "<%= @es_cluster %>" }
    <% end -%>
  <% end -%>
  <% unless @graphite_server_ip.empty? -%>
  graphite { host => "<%= @graphite_server_ip %>" metrics => ["logstash.events", "1"] }
  <% end -%>
  <% unless @splunk_host.empty? -%>
  if [log_level] not in <%= node['logstash']['exclude_level_for_splunk'].to_s %> {
    udp { host => "<%= @splunk_host %>" port => "<%= @splunk_port %>" }
  }
  <% end -%>
  <% # unless node['logstash']['server']['outputs'].empty? -%>
    <%= LogstashConf.section_to_str(node['logstash']['server']['outputs']) %>
  <% # end -%>
}
